{
 "add_total_row": 1,
 "columns": [],
 "creation": "2023-11-13 12:34:59.515414",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [],
 "idx": 0,
 "is_standard": "Yes",
 "javascript": "frappe.provide(\"frappe.datetime\");\r\n\r\nfrappe.datetime.get_start_of_week = function(date) {\r\n    var curr = new Date(date);\r\n    var first = curr.getDate() - curr.getDay() + 1;\r\n    var firstDay = new Date(curr.setDate(first));\r\n    return firstDay.toISOString().slice(0, 10);\r\n};\r\n\r\nfrappe.datetime.get_end_of_week = function(date) {\r\n    var curr = new Date(date);\r\n    var last = curr.getDate() - curr.getDay() + 7;\r\n    var lastDay = new Date(curr.setDate(last));\r\n    return lastDay.toISOString().slice(0, 10);\r\n};\r\n\r\nfrappe.datetime.get_last_day_of_last_month = function() {\r\n    var today = new Date();\r\n    var lastDayOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);\r\n    return lastDayOfLastMonth.toISOString().slice(0, 10);\r\n};\r\n\r\n// Now you can use the get_start_of_week, get_end_of_week, and get_last_day_of_last_month functions in your report configuration\r\nvar defaultFromDate = frappe.datetime.get_start_of_week(frappe.datetime.nowdate());\r\nvar defaultToDate = frappe.datetime.get_last_day_of_last_month();\r\n\r\nfrappe.query_reports['Customer Statement of Account'] = {\r\n    \"filters\": [\r\n        {\r\n            'label':\"As ON\",\r\n            'fieldname':\"to_date\",\r\n            'fieldtype':\"Date\",\r\n            'width': 80,\r\n            \"default\": defaultToDate,\r\n        },\r\n        {\r\n            'label': \"Customer Name\",\r\n            'fieldname': \"customer\",\r\n            'fieldtype': \"Link\",\r\n            'options': \"Customer\",\r\n            'width': 80,\r\n            'on_change': function () {\r\n                var customer_name = frappe.query_report.get_filter_value('customer');\r\n                if (customer_name) {\r\n                    // Fetch and set customer_tax directly when the customer is selected\r\n                    fetchAndSetCustomerTax(customer_name);\r\n                }\r\n                else {\r\n                    // Clear the \"Customer TRN number\" filter if tax_id is not available\r\n                    console.log('Customer TRN number');\r\n                    frappe.query_report.set_filter_value('customer_tax', '');\r\n                }\r\n            }\r\n        },\r\n        {\r\n            'label': \"Customer TRN number\",\r\n            'fieldname': \"customer_tax\",\r\n            'fieldtype': \"Data\",\r\n            'width': 80,\r\n        },\r\n    ],\r\n    \"get_query\": function (filters) {\r\n        // Customize the query based on the filters\r\n        var query = {\r\n            // Your query configuration here\r\n        };\r\n\r\n        // Exclude \"To Date\" filter from the query when printing\r\n        if (frappe.query_report.is_print) {\r\n            query.filters = query.filters.filter(filter => filter.fieldname !== 'to_date');\r\n        }\r\n\r\n        return query;\r\n    },\r\n};\r\n\r\nfunction fetchAndSetCustomerTax(customer_name) {\r\n    // Make an asynchronous request to fetch the customer_tax based on the selected customer\r\n    frappe.db.get_value('Customer', customer_name, 'tax_id')\r\n        .then(r => {\r\n            console.log(r.message.tax_id); // Output the fetched tax_id to the console\r\n\r\n            if (r.message.tax_id) {\r\n                // Set the fetched customer_tax directly into the \"Customer TRN number\" filter\r\n                frappe.query_report.set_filter_value('customer_tax', r.message.tax_id);\r\n            } \r\n        });\r\n}\r\n",
 "letter_head": "Main",
 "modified": "2023-11-16 16:09:48.283856",
 "modified_by": "Administrator",
 "module": "Ghaima Custom",
 "name": "Customer Statement of Account",
 "owner": "Administrator",
 "prepared_report": 0,
 "ref_doctype": "Sales Invoice",
 "report_name": "Customer Statement of Account",
 "report_script": "\r\n\r\ndef get_columns(filters):\r\n    columns = [\r\n        {\r\n            'label':'Posting Date',\r\n            'fieldname':\"posting_date\",\r\n            'fieldtype':\"Date\",\r\n            'width': 90\r\n        },\r\n        {\r\n            'label':'Invoice No',\r\n            'fieldname':\"name\",\r\n            'fieldtype':\"Link\",\r\n            'options':\"Sales Invoice\",\r\n            'width': 150\r\n        },\r\n        {\r\n            'label':'Customer LPO',\r\n            'fieldname':\"po_no\",\r\n            'fieldtype':\"Data\",\r\n            'width': 90\r\n        },\r\n        {\r\n            'label':'Due Date',\r\n            'fieldname':\"due_date\",\r\n            'fieldtype':\"Date\",\r\n            'width': 90\r\n        },\r\n\r\n       {\r\n            'label':'Grand Total',\r\n            'fieldname':\"grand_total\",\r\n            'fieldtype':\"Currency\",\r\n            'width': 120\r\n        },\r\n       {\r\n            'label':'Paid Amount',\r\n            'fieldname':\"paid_amount\",\r\n            'fieldtype':\"Currency\",\r\n            'width': 120\r\n        },\r\n       {\r\n            'label':'Outstanding Amount',\r\n            'fieldname':\"outstanding_amount\",\r\n            'fieldtype':\"Currency\",\r\n            'width': 120\r\n        },\r\n        {\r\n            'label':'Age (Days)',\r\n            'fieldname':\"age_days\",\r\n            'fieldtype':\"Data\",\r\n            'width': 120\r\n        },\r\n\r\n    ]\r\n    return columns\r\n    \r\ndef get_data(filters):\r\n    data = frappe.db.sql('''\r\n    SELECT name, po_no,customer, posting_date, due_date, grand_total, paid_amount, outstanding_amount, \r\n    CAST(DATEDIFF(NOW(), due_date) AS CHAR) AS age_days\r\n    FROM `tabSales Invoice` si\r\n    WHERE si.docstatus = 1\r\n    AND outstanding_amount > 0\r\n    AND (customer = IFNULL(%(customer)s, \"\") OR %(customer)s IS NULL)\r\n    AND due_date <= %(to_date)s\r\n    ORDER BY posting_date;\r\n    ''',\r\n    {'from_date': filters.from_date, 'to_date': filters.to_date,'customer':filters.customer}, as_dict=1)\r\n    data_list = data\r\n\r\n    return data\r\n\r\ndata = get_columns(filters), get_data(filters)",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "Accounts Manager"
  },
  {
   "role": "Accounts User"
  },
  {
   "role": "Employee Self Service"
  }
 ]
}